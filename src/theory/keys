ssymmetric key
 -> same key is used to encrypt and decrypt a message
 -> it is fast

 Asymmetric key
 -> it uses two seprate key : public and private
    public - it is used to encrypt the message
    private -> is used to decryupt and encrypt the message


 Hybrid encryption

   server use client public key to generate an encrypted session key
   client decrypt the  session key using its private key
   server sends a message encrypted by session key
   client decrypt the message using session key


 SSL certificate: server send the public key to client along with a certificate signed by some agency and the
 certicate has key combination of server and certificate company public key(lets certificate)
 client ask the certificate company to share their public key. client check the keys matched the key mentiomed in the certificate
 if yes it generate a session key using server public key and send it to server to encrypt the message.

 jwt token :

 Header
 Identifies which algorithm is used to generate the signature. In the below example, HS256 indicates that this token is signed using HMAC-SHA256.
 Typical cryptographic algorithms used are HMAC with SHA-256 (HS256) and RSA signature with SHA-256 (RS256). JWA (JSON Web Algorithms) RFC 7518 introduces many more for both authentication and encryption.[8]
 {
   "alg": "HS256",
   "typ": "JWT"
 }
 Payload
 Contains a set of claims. The JWT specification defines seven Registered Claim Names, which are the standard fields commonly included in tokens.[1] Custom claims are usually also included, depending on the purpose of the token.
 This example has the standard Issued At Time claim (iat) and a custom claim (loggedInAs).
 {
   "loggedInAs": "admin",
   "iat": 1422779638
 }
 Signature
 Securely validates the token. The signature is calculated by encoding the header and payload using Base64url Encoding RFC 4648 and concatenating the two together with a period separator. That string is then run through the cryptographic algorithm specified in the header. This example uses HMAC-SHA256 with a shared secret (public key algorithms are also defined). The Base64url Encoding is similar to base64, but uses different non-alphanumeric characters and omits padding.
 HMAC_SHA256(
   secret,
   base64urlEncoding(header) + '.' +
   base64urlEncoding(payload)
 )

 encoding : convert one data to another and can be reversed like base 64 that convert each 6 bit binary data to 1 character
 hashing : hashing is one way onces hased cannot be revert back like MD5 / sha 256 for integrity check
 encryption : to encrypt a data using some key and same key being used to decrypt it.
